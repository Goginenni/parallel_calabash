#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path("../../lib", __FILE__)

require 'parallel_appium'
require 'parallel_appium/version'
require 'optparse'
require 'parallel_calabash'

def parse_arguments(arguments)
  options = {}
  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: parallel_appium [options]\n" \
                "Example: parallel_appium -a '<appium command>' -o '<cucumber opts>' -r '<cucumber_reports>' features/"

    opts.on("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    opts.on("-v", "--version", "Show version") do
      puts ParallelAppium::VERSION
      exit
    end

    opts.on("-d", "--distribution-tag tag", "divide features into groups as per occurrence of given tag") do |distribution_tag|
      options[:distribution_tag] = distribution_tag
    end

    opts.on("-a","--appium_cmd '[APPIUM COMMAND]'","Custom appium command with options") do |appium_cmd|
      options[:appium_cmd] =  appium_cmd
    end

    opts.on("-f", "--filter filter", "Filter devices to run tests against using partial device id or model name matching. Multiple filters seperated by ','") do |filter_opts|
      options[:filter] = filter_opts.split(',').grep(/./)
    end

    opts.on('--skip_ios_ping_check', 'Skip the connectivity test for iOS devices') do
      options[:skip_ios_ping_check] = true
    end

    opts.on("-o", "--cucumber_opts '[OPTIONS]'", "execute with those cucumber options") do |cucumber_opts|
      options[:cucumber_options] = cucumber_opts
    end

    opts.on("-r", "--cucumber_reports '[REPORTS]'", "generate these cucumber reports (not during filtering)") do |cucumber_reports|
      options[:cucumber_reports] = cucumber_reports
    end

    opts.on("--serialize-stdout", "Serialize stdout output, nothing will be written until everything is done") do |mute_output|
      options[:mute_output] = mute_output
    end

    opts.on("--concurrent", "Run tests concurrently. Each test will run once on each device") do |concurrent_opt|
      options[:concurrent] = true
    end

    opts.on("--group-by-scenarios", "Distribute equally as per scenarios. This uses cucumber dry run") do
      options[:group_by_scenarios] = true
    end

  end

  opt_parser.parse!(arguments)
  options[:feature_folder] = arguments
  options
rescue OptionParser::InvalidOption => e
  puts "Invalid arguments #{e}"
  fail opt_parser.help
end

options = parse_arguments(ARGV)

ParallelAppium::ParallelCalabashApp.new(options).run_tests_in_parallel


